"""
Mercurio AI Backtesting Service Example
Based on Chapter 3: Understanding the Platform

This script demonstrates how to use the backtesting functionality
to test a trading strategy against historical data.
"""
import os
import sys
import asyncio
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Add the project root to Python path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))

# Import required components
from app.strategies.moving_average import MovingAverageStrategy
from app.services.market_data import MarketDataService
from app.services.backtesting import BacktestingService

async def run_backtest():
    """Run a backtest using the MovingAverageStrategy"""
    
    print("Initializing services...")
    market_data = MarketDataService()
    backtesting = BacktestingService()
    
    # Create a moving average strategy
    print("Creating MovingAverageStrategy...")
    strategy = MovingAverageStrategy(
        short_window=10,  # 10-day short moving average
        long_window=30,   # 30-day long moving average
        use_ml=False      # Use classic moving average crossover (not ML-enhanced)
    )
    
    # Define backtest parameters
    symbol = "MSFT"
    end_date = datetime.now()
    start_date = end_date - timedelta(days=365)  # One year of data
    initial_capital = 10000  # $10,000 initial capital
    
    print(f"Fetching historical data for {symbol} from {start_date.date()} to {end_date.date()}...")
    
    # Get historical data
    data = await market_data.get_historical_data(
        symbol=symbol,
        start_date=start_date,
        end_date=end_date
    )
    
    print(f"Retrieved {len(data)} data points for {symbol}")
    
    # Run the backtest using the backtesting service
    print(f"Running backtest with initial capital of ${initial_capital}...")
    
    backtest_result = await backtesting.run_backtest(
        strategy=strategy,
        symbol=symbol,
        start_date=start_date,
        end_date=end_date,
        initial_capital=initial_capital
    )
    
    # Display backtest results
    print("\nBacktest Results:")
    print("=" * 50)
    
    # Check for errors
    if "error" in backtest_result:
        print(f"Error during backtest: {backtest_result['error']}")
        return
    
    # Extract performance metrics
    total_return = backtest_result.get("total_return", 0)
    sharpe_ratio = backtest_result.get("sharpe_ratio", 0)
    max_drawdown = backtest_result.get("max_drawdown", 0)
    win_rate = backtest_result.get("win_rate", 0)
    
    print(f"Strategy: {backtest_result.get('strategy', 'MovingAverageStrategy')}")
    print(f"Symbol: {backtest_result.get('symbol', symbol)}")
    print(f"Period: {backtest_result.get('start_date', start_date.date())} to {backtest_result.get('end_date', end_date.date())}")
    print(f"Initial Capital: ${backtest_result.get('initial_capital', initial_capital):.2f}")
    
    # Format final equity with fallback for different field names
    final_equity = backtest_result.get("final_equity", 
                  backtest_result.get("final_capital", initial_capital))
    print(f"Final Capital: ${final_equity:.2f}")
    
    print(f"Total Return: {total_return:.2f}%")
    print(f"Annualized Return: {backtest_result.get('annualized_return', 0):.2f}%")
    print(f"Sharpe Ratio: {sharpe_ratio:.2f}")
    print(f"Maximum Drawdown: {max_drawdown * 100:.2f}%")
    print(f"Win Rate: {win_rate * 100:.2f}%")
    
    num_trades = backtest_result.get("num_trades", 0)
    if isinstance(num_trades, list):
        num_trades = len(num_trades)
    print(f"Number of Trades: {num_trades}")
    
    # Display buy-and-hold comparison if available
    if "market_return" in backtest_result:
        print(f"Buy & Hold Return: {backtest_result['market_return']:.2f}%")
        print(f"Strategy Outperformance: {total_return - backtest_result['market_return']:.2f}%")
    
    # Plot equity curve if available
    if "charts" in backtest_result and "equity_curve" in backtest_result["charts"]:
        print("\nEquity curve available in the results")
        
        # The chart is already generated by the backtesting service
        # In a real application, you would display or save this image
        chart_data = backtest_result["charts"]["equity_curve"]
        print("Chart data is available as base64-encoded image")
        
        # Example of how to save the base64 image (commented out)
        # import base64
        # with open("equity_curve.png", "wb") as f:
        #     f.write(base64.b64decode(chart_data))
    elif "backtest_data" in backtest_result and "cumulative_strategy_returns" in backtest_result["backtest_data"].columns:
        # Generate our own plot from the backtest data
        print("\nGenerating equity curve from backtest data...")
        data = backtest_result["backtest_data"]
        
        plt.figure(figsize=(12, 6))
        plt.plot(data.index, data["cumulative_strategy_returns"], label="Strategy")
        if "cumulative_returns" in data.columns:  # Market returns for comparison
            plt.plot(data.index, data["cumulative_returns"], label="Buy & Hold")
        
        plt.title(f"{symbol} MovingAverageStrategy Backtest Results")
        plt.xlabel("Date")
        plt.ylabel("Return (%)")
        plt.grid(True)
        plt.legend()
        
        # Save the plot
        output_file = os.path.join(os.path.dirname(__file__), 
                                  f"{symbol}_backtest_results.png")
        plt.savefig(output_file)
        print(f"Equity curve saved to: {output_file}")
        
        # Show the plot if in interactive environment
        plt.show()
    else:
        print("\nNo equity curve data available to plot.")

if __name__ == "__main__":
    print("Backtesting Service Example")
    print("=" * 50)
    asyncio.run(run_backtest())
